--- src/TerrariaNetCore/Terraria/Main.cs
+++ src/tModLoader/Terraria/Main.cs
@@ -3,6 +_,7 @@
 using Microsoft.Xna.Framework.Content;
 using Microsoft.Xna.Framework.Graphics;
 using Microsoft.Xna.Framework.Input;
+using Newtonsoft.Json;
 using ReLogic.Content;
 using ReLogic.Content.Sources;
 #if MAC
@@ -19,7 +_,7 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 #if WINDOWS
-using System.Drawing;
+using Size = System.Drawing.Size;
 #endif
 using System.IO;
 using System.Linq;
@@ -35,6 +_,7 @@
 #if WINDOWS
 using System.Windows.Forms;
 #endif
+using Steamworks;
 using Terraria.Achievements;
 using Terraria.Audio;
 using Terraria.Chat;
@@ -72,9 +_,16 @@
 using Terraria.IO;
 using Terraria.Localization;
 using Terraria.Map;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Core;
+using Terraria.ModLoader.Default;
+using Terraria.ModLoader.Engine;
+using Terraria.ModLoader.IO;
+using Terraria.ModLoader.UI;
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
+using Terraria.Social.Steam;
 using Terraria.UI;
 using Terraria.UI.Chat;
 using Terraria.UI.Gamepad;
@@ -87,9 +_,9 @@
 namespace Terraria
 {
 #if SERVER
-	public class Main : Terraria.Server.Game
+	public partial class Main : Terraria.Server.Game
 #else
-	public class Main : Game
+	public partial class Main : Game
 #endif
 	{
 		public delegate void OnPlayerSelected(PlayerFileData player);
@@ -260,7 +_,7 @@
 		public static bool notTheBeesWorld = false;
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(SavePath + "/favorites.json", isCloud: false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("favorites.json", isCloud: true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("ModLoader/favorites.json", true);
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
 		public static PingMapLayer Pings = new PingMapLayer();
@@ -501,7 +_,11 @@
 		public static float gFader;
 		public static byte gFadeDir = 1;
 		public static bool shouldDrawNetDiagnosticsUI;
-		public static INetDiagnosticsUI ActiveNetDiagnosticsUI => dedServ ? new EmptyDiagnosticsUI() : new NetDiagnosticsUI();
+#if CLIENT
+		public static INetDiagnosticsUI ActiveNetDiagnosticsUI = new NetDiagnosticsUI();
+#else
+		public static INetDiagnosticsUI ActiveNetDiagnosticsUI = new EmptyDiagnosticsUI();
+#endif
 		public static IMultiplayerClosePlayersOverlay ActiveClosePlayersTeamOverlay = new NewMultiplayerClosePlayersOverlay();
 		public static double UpdateTimeAccumulator;
 		public static bool drawSkip;
@@ -3197,17 +_,7 @@
 		}
 
 		protected void CheckBunny() {
-			try {
-#if WINDOWS //TODO: <https://www.nuget.org/packages/Microsoft.Win32.Registry/>?
-				RegistryKey currentUser = Registry.CurrentUser;
-				currentUser = currentUser.CreateSubKey("Software\\Terraria");
-				if (currentUser != null && currentUser.GetValue("Bunny") != null && currentUser.GetValue("Bunny").ToString() == "1")
-					runningCollectorsEdition = true;
-#endif
-			}
-			catch {
-				runningCollectorsEdition = false;
+			runningCollectorsEdition = false;
-			}
 		}
 
 		private static void TryPickingDefaultUIScale(float displayHeight) {
@@ -3246,7 +_,6 @@
 			PendingBorderlessState = screenBorderless;
 			screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
 #if WINDOWS
-			if(!dedServ) {
 			Form form = (Form)Control.FromHandle(instance.Window.Handle);
 			if (screenBorderless) {
 				SetBorderlessFormStyle(form);
@@ -3260,7 +_,6 @@
 			}
 
 			form.BringToFront();
-			}
 #endif
 			int currentValue2 = graphics.PreferredBackBufferWidth;
 			int currentValue3 = graphics.PreferredBackBufferHeight;
@@ -3623,7 +_,6 @@
 
 							if (num >= 91 && binaryReader.ReadBoolean()) {
 #if WINDOWS
-								if(!dedServ)
 								((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
 #endif
 							}
@@ -4034,7 +_,6 @@
 			if (previousExecutionState != 0)
 				NativeMethods.SetThreadExecutionState(previousExecutionState);
 #endif
-			Netplay.WaitForClosePortClose();
 		}
 
 		public void DedServ() {
@@ -4835,12 +_,14 @@
 			}
 		}
 
-		public Main() : base(dedServ) {
+		public Main() {
 			instance = this;
 			UnpausedUpdateSeed = (ulong)Guid.NewGuid().GetHashCode();
 			base.Exiting += Main_Exiting;
-			if (dedServ)
+
+			if (Main.dedServ) {
 				return;
+			}
 
 			Configuration.Load();
 			graphics = new GraphicsDeviceManager(this as Game);
@@ -4868,12 +_,11 @@
 			if (graphicsAdapter != null)
 				e.GraphicsDeviceInformation.Adapter = graphicsAdapter;
 
-			if(!dedServ)
 			graphics.PreparingDeviceSettings -= SetMonitorOnce;
 		}
 
 		protected void SetTitle() {
-			if (dedServ)
+			if (Main.dedServ)
 				return;
 
 			_cachedTitle = Lang.GetRandomGameTitle();
@@ -4916,10 +_,11 @@
 		}
 
 		protected override void Initialize() {
-			if(dedServ)
-			netMode = 2;
-
 			musicFade[50] = 1f;
+
+			if (Main.dedServ)
+				netMode = 2;
+
 			for (int i = 0; i < 10; i++) {
 				recentWorld[i] = "";
 				recentIP[i] = "";
@@ -4945,8 +_,10 @@
 			WorldGen.Hooks.OnWorldLoad += delegate {
 				AmbienceServer = new AmbienceServer();
 				LocalGolfState = new GolfState();
+
-				if(!dedServ)
+				if (!dedServ) {
-				Lighting.Clear();
+					Lighting.Clear();
+				}
 			};
 
 			DontStarveSeed.Initialize();
@@ -4961,7 +_,7 @@
 
 			SceneMetrics = new SceneMetrics();
 
-			if (dedServ) {
+			if (Main.dedServ) {
 				Initialize_AlmostEverything();
 				return;
 			}
@@ -5006,16 +_,24 @@
 			ItemDropSolver = new ItemDropResolver(itemDropDatabase);
 			ShopHelper = new ShopHelper();
 			CreativeItemSacrificesCatalog.Instance.Initialize();
-			if (!dedServ) {
+
+			if (dedServ)
+				goto ServerCode1;
+
 			BestiaryUI = new UIBestiaryTest(BestiaryDB);
 			ContentThatNeedsRenderTargets.Add(MapPlayerRenderer);
 			Lighting.Initialize();
 			MapHelper.Initialize();
-			}
-			else {
+
+			goto PostServerCode1;
+
+			ServerCode1:
+
 			Mount.Initialize();
 			Minecart.Initialize();
-			}
+
+			PostServerCode1:
+
 			WorldGen.RandomizeBackgrounds(rand);
 			if (treeBGSet1[0] == 173)
 				WorldGen.RandomizeBackgrounds(rand);
@@ -5089,17 +_,17 @@
 				ActivePlayerFileData.StartPlayTimer();
 				Player.Hooks.EnterWorld(myPlayer);
 			}
-
-			if (dedServ)
-				return;
 #if WINDOWS
-			else {
+			else if (!Main.dedServ) {
 				IntPtr systemMenu = GetSystemMenu(base.Window.Handle, bRevert: false);
 				int menuItemCount = GetMenuItemCount(systemMenu);
 				RemoveMenu(systemMenu, menuItemCount - 1, 1024);
 			}
 #endif
 
+			if (Main.dedServ)
+				return;
+
 			SoundID.FillAccessMap();
 			Star.SpawnStars();
 			ItemSorting.SetupWhiteLists();
@@ -8598,7 +_,7 @@
 			if (!SoundEngine.IsAudioSupported || !_musicLoaded)
 				return;
 
-			if (!dedServ && !showSplash)
+			if (!dedServ && !showSplash) // if (!showSplash)
 				SoundEngine.Update();
 
 			if (musicVolume == 0f)
@@ -12423,7 +_,10 @@
 		}
 
 		public static void NotifyOfEvent(GameNotificationType type) {
+			if (Main.dedServ)
+				return;
+
-			if (!dedServ && !instance.IsActive && _flashNotificationType.HasFlag(type)) {
+			if (!instance.IsActive && _flashNotificationType.HasFlag(type)) {
 				QueueMainThreadAction(delegate {
 					Platform.Get<IWindowService>().StartFlashingIcon(instance.Window);
 				});
@@ -12476,16 +_,26 @@
 				InGameUI.SetState(null);
 
 			CurrentInputTextTakerOverride = null;
-			if(!dedServ)
+
+			if (dedServ)
+				goto SkipAchievemntAdvisorUpdate;
+
 			AchievementAdvisor.Update();
 
+			SkipAchievemntAdvisorUpdate:
+
 			PlayerInput.SetZoom_Unscaled();
 			MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
 
-			if (!dedServ && Main.OnTickForThirdPartySoftwareOnly != null)
+			if (Main.dedServ)
+				goto SkipSpecialOnTick;
+
+			if (Main.OnTickForThirdPartySoftwareOnly != null)
 				Main.OnTickForThirdPartySoftwareOnly();
 
+			SkipSpecialOnTick:
+
 			if (_hasPendingNetmodeChange) {
 				netMode = _targetNetMode;
 				_hasPendingNetmodeChange = false;
@@ -12688,15 +_,13 @@
 
 				UpdateOldNPCShop();
 				hasFocus = base.IsActive;
-#if WINDOWS
-				if(!dedServ) {
+#if WINDOWS && CLIENT
 				Form form = Control.FromHandle(base.Window.Handle) as Form;
 				bool num2 = form.WindowState == FormWindowState.Minimized;
 				bool flag = Form.ActiveForm == form;
 				hasFocus |= flag;
 				if (num2)
 					hasFocus = false;
-				}
 #endif
 
 				if (!hasFocus && netMode == 0) {
@@ -12774,7 +_,9 @@
 			if (Main.OnTickForInternalCodeOnly != null)
 				Main.OnTickForInternalCodeOnly();
 
+			// Client - if (netMode != 1 && !gameMenu && !gamePaused && AmbienceServer != null)
+			// Server - if (AmbienceServer != null)
-			if ((dedServ || netMode != 1 && !gameMenu && !gamePaused) && AmbienceServer != null)
+			if ((dedServ || (netMode != 1 && !gameMenu && !gamePaused)) && AmbienceServer != null)
 				AmbienceServer.Update();
 
 			WorldGen.BackgroundsCache.UpdateFlashValues();
@@ -14704,8 +_,9 @@
 		public static extern short GetKeyState(int keyCode);
 
 		public static string GetInputText(string oldString, bool allowMultiLine = false) {
-			if(dedServ)
-			return "";
+			if (dedServ) {
+				return "";
+			}
 
 			if (!hasFocus)
 				return oldString;
@@ -36132,10 +_,15 @@
 
 		protected void QuitGame() {
 			SaveSettings();
-			if (!dedServ) {
+
+			if (dedServ)
+				goto PostClientThings;
+
 			SocialAPI.Shutdown();
+
+			PostClientThings:
+
 			Assets.TransferCompletedAssets();
-			}
 			Exit();
 #if MAC
 			SDL.SDL_DestroyWindow(base.Window.Handle);
@@ -43611,6 +_,7 @@
 		public static void TriggerPing(Vector2 position) {
 			if (dedServ)
 				return;
+
 			Pings.Add(position);
 			if (netMode == 1)
 				NetManager.Instance.SendToServer(NetPingModule.Serialize(position));
@@ -47457,6 +_,7 @@
 		private static void CheckMonoliths() {
 			if (dedServ)
 				return;
+
 			bool flag = player[myPlayer].ZoneTowerVortex || player[myPlayer].ZoneTowerNebula || player[myPlayer].ZoneTowerStardust || player[myPlayer].ZoneTowerSolar;
 			for (int i = 0; i < MonolithFilterNames.Length; i++) {
 				if (!flag && i == SceneMetrics.ActiveMonolithType) {
@@ -47542,11 +_,14 @@
 			if (!base.IsActive)
 				maxQ = true;
 
-			if (!dedServ) {
+			if (dedServ)
+				goto SkipOverPreDraw;
+
 			UpdateDisplaySettings();
 			if (Main.OnPreDraw != null)
 				Main.OnPreDraw(gameTime);
-			}
+
+			SkipOverPreDraw:
 
 			drawsCountedForFPS++;
 			screenLastPosition = screenPosition;
