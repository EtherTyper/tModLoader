name: Build tModLoader

# Controls when the action will run. 
on:
  # This workflow runs when a push to 1.4 branch happens, or when a label is added to a pull request targetting 1.4 branch.
  push:
    branches: [1.4, 1.4_mergedtesting, gh_actions_test]
  pull_request_target:
    types: [labeled]
    branches: [1.4, 1.4_mergedtesting]
  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    # Make sure not to run this job on other labels
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'Safe to Test')

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out base branch
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 10

      - name: Check out pull request code to separate folder
        uses: actions/checkout@v2
        if: github.event_name == 'pull_request_target'
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          path: pullrequest
          persist-credentials: false
        # TODO: build doesn't have right branch I assume

      - name: Copy over pull request patches folder and ExampleMod folder
        if: github.event_name == 'pull_request_target'
        shell: bash
        run: |
          ls -l
          cd pullrequest
          ls -l
          cd ..
          rm -r patches
          cp -fR pullrequest/patches patches
          rm -r ExampleMod
          cp -fR pullrequest/ExampleMod ExampleMod

      # A cache allows the build to skip the decompile step
      - name: Retrieve encrypted decompiled zip cache
        id: cache-decompiled
        uses: actions/cache@v2
        with:
          path: decompiled.zip.gpg
          # update key with new Terraria releases and when ilspy or ilspy decompile settings are updated
          key: 1432-A

      - name: Restore decompiled folder from cache
        if: steps.cache-decompiled.outputs.cache-hit == 'true'
        shell: bash
        run: |
          echo Restoring decompiled folder from cache
          ls -l
          gpg --quiet --batch --yes --decrypt --passphrase="$SETUP_ASSETS_PASSPHRASE" --output decompiled.zip decompiled.zip.gpg
          ls -l
          unzip -o decompiled.zip -d src
          cd src
          ls -l
          cd ..
        env:
          SETUP_ASSETS_PASSPHRASE: ${{ secrets.SETUP_ASSETS_PASSPHRASE }}

      # GitHub runners may have outdated .NET versions.
      - name: Install .NET SDKs
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      # Runs a set of commands using the runners shell
      - name: Build script
        if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'Safe to Test')
        shell: bash
        run: |
          echo CI setup for Terraria v$TERRARIA_VERSION
          echo Downloading Terraria Server zip
          curl -s -L https://terraria.org/api/download/pc-dedicated-server/terraria-server-$TERRARIA_VERSION.zip -o terrariaserver.zip
          unzip -q terrariaserver.zip
          echo Extracting Setup Secret Assets
          gpg --quiet --batch --yes --decrypt --passphrase="$SETUP_ASSETS_PASSPHRASE" --output ./$TERRARIA_VERSION/Windows/Terraria.exe ./setup/SecretAssets/SetupAsset1.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$SETUP_ASSETS_PASSPHRASE" --output ./$TERRARIA_VERSION/Windows/SteelSeriesEngineWrapper.dll ./setup/SecretAssets/SetupAsset2.gpg
          
          echo Installing XNA
          curl -s -L https://github.com/JavidPack/tModLoaderPublishIntegration/raw/master/xnafx40_redist.msi -O
          msiexec //i xnafx40_redist.msi //quiet
          echo XNA Installed
          
          echo ::group::Running setup.bat
          ./setup.bat auto ./$TERRARIA_VERSION/Windows
          echo ::endgroup::
          
          echo ::group::WorkspaceInfo.targets
          cat src/WorkspaceInfo.targets; echo
          echo ::endgroup::
          
          echo ::group::Creating tModLoader cache zip file
          7z a tModLoader.zip ./src/tModLoader/
          gpg --quiet --batch --yes --symmetric --cipher-algo AES256 --passphrase="$SETUP_ASSETS_PASSPHRASE" tModLoader.zip
          echo ::endgroup::
          
          echo ::group::Building Release
          dotnet clean src/tModLoader/Terraria/Terraria.csproj -c Release --nologo -v q
          (
            set +e;
            dotnet build src/tModLoader/Terraria/Terraria.csproj -c Release --nologo -v q -bl;
            err=$?;
            [[ $err -ne 0 ]] && echo Uploading msbuild.binlog && curl --upload-file ./msbuild.binlog http://transfer.sh/msbuild.binlog;
            exit $err
          )
          
          mkdir -p artifacts/Release
          cp -r steam_build/. artifacts/Release
          echo ::endgroup::
          
          echo Cleaning up output directory in-between builds...
          rm -rf steam_build
          
          echo ::group::Building Debug
          dotnet clean src/tModLoader/Terraria/Terraria.csproj -c Debug --nologo -v q
          dotnet build src/tModLoader/Terraria/Terraria.csproj -c Debug --nologo -v q
          
          mkdir -p artifacts/Debug
          cp -r steam_build/. artifacts/Debug
          echo ::endgroup::
          
          echo ::group::Creating decompiled cache zip file
          7z a decompiled.zip ./src/decompiled/
          gpg --quiet --batch --yes --symmetric --cipher-algo AES256 --passphrase="$SETUP_ASSETS_PASSPHRASE" decompiled.zip
          echo ::endgroup::
          
          echo ::group::Creating RecentGitHubCommits.txt
          git log -10 --format=oneline
          git log -10 --format=oneline > artifacts/Debug/RecentGitHubCommits.txt
          git log -10 --format=oneline > artifacts/Release/RecentGitHubCommits.txt
          echo ::endgroup::
        env:
          SETUP_ASSETS_PASSPHRASE: ${{ secrets.SETUP_ASSETS_PASSPHRASE }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          BUILDPURPOSE:  ${{ fromJSON('["Github_Commit", "Alpha"]')[github.event_name == 'push' && github.ref == 'refs/heads/1.4'] }}
          TERRARIA_VERSION: 1432
          
      - name: Upload Debug Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Debug Build
          path: |
            ./artifacts/Debug/
            
      - name: Upload Release Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Release Build
          path: |
            ./artifacts/Release/
           
      - name: Upload temporary encrypted src artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/1.4'
        uses: actions/upload-artifact@v2
        with:
          name: temporary-src
          path: tModLoader.zip.gpg
            
      - name: Build ExampleMod
        shell: bash
        run: |
          echo Adding build info to ExampleMod displayName
          echo "displayName = Example Mod (${GITHUB_REF##*/}-${{ github.sha }})" >> ./ExampleMod/build.txt
          
          #pwd gives an absolute path, required for -tmlsavedirectory as the build command is executed from the steam/deployment dir          
          ModloaderDir=$(pwd)/local/ModLoader
          echo ModloaderDir is: $ModloaderDir
          mkdir -p $ModloaderDir
          
          export ExtraBuildModFlags="-tmlsavedirectory \"$(cygpath -w $ModloaderDir)\"" #convert unix path to windows
          echo ExtraBuildModFlags is: $ExtraBuildModFlags
          
          echo ::group::Building ExampleMod
          dotnet build ExampleMod/ExampleMod.csproj --nologo
          echo ::endgroup::
          
          mkdir -p artifacts/Mods
          mv $ModloaderDir/Mods/ExampleMod.tmod artifacts/Mods/ExampleMod.tmod
          
          echo ::group::Testing Example Mod build from "Mod Sources" dir  
          cp -r ExampleMod "$ModloaderDir/Mod Sources/ExampleMod"
          cd "$ModloaderDir/Mod Sources/ExampleMod"
          unset ExtraBuildModFlags
          dotnet build ExampleMod.csproj --nologo
          echo ::endgroup::
          
      - name: Upload ExampleMod Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ExampleMod Build
          path: |
            ./artifacts/Mods/ExampleMod.tmod
            
      - name: List final directory and file structure
        if: always()
        shell: pwsh
        run: tree /f /a

  documentation:
    # Documentation generated on successful builds of pushes to 1.4 branch
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/1.4'
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Check out base branch
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Download temporary encrypted src artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: temporary-src
      - name: Restore tModLoader folder from artifact
        shell: bash
        run: |
          echo Restoring tModLoader folder from cache
          ls -l
          gpg --quiet --batch --yes --decrypt --passphrase="$SETUP_ASSETS_PASSPHRASE" --output tModLoader.zip tModLoader.zip.gpg
          ls -l
          unzip -o tModLoader.zip -d src
          cd src
          ls -l
          cd ..
        env:
          SETUP_ASSETS_PASSPHRASE: ${{ secrets.SETUP_ASSETS_PASSPHRASE }}
      - name: Generate Documentation
        uses: mattnotmitt/doxygen-action@v1.3.1
        with:
          working-directory: 'solutions/documentation/'
          doxyfile-path: 'Doxyfile'
      - name: View resulting files
        run: |
          echo pwd is: ${PWD}
          ls -alhR
        working-directory: solutions/documentation
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: temporary-src
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./solutions/documentation/html
          destination_dir: html_alpha
